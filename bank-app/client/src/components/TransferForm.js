import React, { Component } from 'react';
import axios from 'axios';
import '../css/transfer-styles.css';

class TransferForm extends Component {
    constructor(props) {
        super(props);
        this.state = {
            membershipId: '',
            memberName: '',
            membershipIdConfirmation: '',
            transferAmount: '',
            isOpen: false // to render form as popup
        };
    }

    openModal = () => {
        this.setState({ isOpen: true });
    }

    closeModal = () => {
        this.setState({ isOpen: false });
    }

    // To return the current Date as a string
    getDate = () => {
        const currentDate = new Date();

        // To get date without time
        //currentDate.setHours(0, 0, 0, 0);

        // To keep only the date portion
        return currentDate.toISOString().split('T')[0];
    };


    // Returns true if membershipId is of correct format
    membershipValidation = (membershipId) => {
        // TODO 
        // Grab validation format from DB (After LoyaltyProgramQuery API is implemented)
        return true;
    };

    handleSubmit = (event) => {
        event.preventDefault();
        const { membershipId, memberName, membershipIdConfirmation, transferAmount } = this.state;

        const transferDate = this.getDate();

        if (membershipId === membershipIdConfirmation && this.membershipValidation(membershipId)) {
            const form = {
                membershipId,
                memberName,
                transferDate,
                transferAmount
            };

            console.log(form);

            axios.post('http://localhost:3001/api/transferFormSubmit', form)
                .then(response => {
                    // TODO, save referenceNumber generated by TransferConnect app
                    console.log(response.data);
                })
                .catch(error => {
                    console.error(error);
                });
        }
        else {
            // TODO if the membershipId is not valid or not of confirmation
            return;
        }
    }

    handleChange = (event) => {
        const { name, value } = event.target;
        this.setState({ [name]: value });
    }

    renderForm = () => {
        const { memberName, membershipId, membershipIdConfirmation, transferAmount, isOpen } = this.state;
        if (!isOpen) {
            return <button onClick={this.openModal}>Transfer</button>

        }

        return (
            <div className= 'overlay'>
                <dialog open={isOpen}>
                    <form onSubmit={this.handleSubmit}>
                        <label htmlFor="memberName">Primary Cardholder Name: </label>
                        <input
                            type="text"
                            id="memberName"
                            name="memberName"
                            value={memberName}
                            onChange={this.handleChange}
                        />
                        <br />

                        <label htmlFor="membershipId">Membership ID: </label>
                        <input
                            type="text"
                            id="membershipId"
                            name="membershipId"
                            value={membershipId}
                            onChange={this.handleChange}
                        />
                        <br />

                        <label htmlFor="membershipIdConfirmation">Confirm Membership ID: </label>
                        <input
                            type="text"
                            id="membershipIdConfirmation"
                            name="membershipIdConfirmation"
                            value={membershipIdConfirmation}
                            onChange={this.handleChange}
                        />
                        <br />

                        <label htmlFor="transferAmount">Transfer Amount: </label>
                        <input
                            type="text"
                            id="transferAmount"
                            name="transferAmount"
                            value={transferAmount}
                            onChange={this.handleChange}
                        />
                        <br />

                        <input
                            type="submit"
                            value="Submit"
                        />
                    </form>
                    <button onClick={this.closeModal}>Close</button>
                </dialog>
            </div>

        );
    }

    render() {
        return (
            <div>
                <this.renderForm />
            </div>
        );
    }
}

export default TransferForm;
